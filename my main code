json
Copy
Edit
{
  "name": "instalanding-ai",
  "version": "1.0.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "next": "14.0.0",
    "react": "18.2.0",
    "react-dom": "18.2.0",
    "next-auth": "^4.22.1",
    "stripe": "^12.5.0",
    "tailwindcss": "^3.3.2",
    "postcss": "^8.4.21",
    "autoprefixer": "^10.4.13",
    "pdfkit": "^0.13.0"
  },
  "devDependencies": {
    "@types/node": "20.2.5",
    "@types/react": "18.2.7",
    "typescript": "5.0.4"
  }
}

js
Copy
Edit
/** @type {import('next').NextConfig} */
const nextConfig = {
  reactStrictMode: true,
}

module.exports = nextConfig

js
Copy
Edit
/** @type {import('tailwindcss').Config} */
module.exports = {
  content: [
    "./pages/**/*.{js,ts,jsx,tsx}",
    "./components/**/*.{js,ts,jsx,tsx}",
    "./features/**/*.{js,ts,jsx,tsx}",
  ],
  theme: {
    extend: {},
  },
  plugins: [],
}

js
Copy
Edit
module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}

json
Copy
Edit
{
  "compilerOptions": {
    "target": "ESNext",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "forceConsistentCasingInFileNames": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "node",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "types": ["node", "jest"]
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx"],
  "exclude": ["node_modules"]
}

css
Copy
Edit
@tailwind base;
@tailwind components;
@tailwind utilities;
7. /pages/_app.tsx
tsx
Copy
Edit
import '../styles/globals.css'
import { SessionProvider } from "next-auth/react";
import Layout from '../components/Layout';

export default function App({ Component, pageProps: { session, ...pageProps } }) {
  return (
    <SessionProvider session={session}>
      <Layout>
        <Component {...pageProps} />
      </Layout>
    </SessionProvider>
  )
}

tsx
Copy
Edit
import React from 'react'
import Navbar from './Navbar'

export default function Layout({ children }: { children: React.ReactNode }) {
  return (
    <div className="min-h-screen flex flex-col bg-gray-50">
      <Navbar />
      <main className="flex-grow container mx-auto px-4 py-6">
        {children}
      </main>
      <footer className="text-center py-4 text-sm text-gray-400">
        Â© 2025 InstaLanding AI. All rights reserved.
      </footer>
    </div>
  )
}

tsx
Copy
Edit
import Link from 'next/link'
import { signIn, signOut, useSession } from 'next-auth/react'

export default function Navbar() {
  const { data: session } = useSession()

  return (
    <nav className="bg-white shadow p-4 flex justify-between items-center">
      <Link href="/">
        <a className="font-bold text-xl text-blue-600">InstaLanding AI</a>
      </Link>
      <div>
        <Link href="/dashboard">
          <a className="mr-6 hover:text-blue-600">Dashboard</a>
        </Link>
        <Link href="/pricing">
          <a className="mr-6 hover:text-blue-600">Pricing</a>
        </Link>
        <Link href="/community">
          <a className="mr-6 hover:text-blue-600">Community</a>
        </Link>
        {session ? (
          <button
            onClick={() => signOut()}
            className="bg-blue-600 text-white px-4 py-2 rounded"
          >
            Sign Out
          </button>
        ) : (
          <button
            onClick={() => signIn()}
            className="bg-blue-600 text-white px-4 py-2 rounded"
          >
            Sign In
          </button>
        )}
      </div>
    </nav>
  )
}

tsx
Copy
Edit
import Link from 'next/link'

export default function Home() {
  return (
    <div className="text-center mt-24">
      <h1 className="text-5xl font-bold mb-4">Welcome to InstaLanding AI</h1>
      <p className="mb-6 text-gray-700">
        Build your profitable landing pages with AI, automate your business empire.
      </p>
      <Link href="/dashboard">
        <a className="bg-blue-600 text-white px-6 py-3 rounded text-lg">
          Get Started
        </a>
      </Link>
    </div>
  )
}

tsx
Copy
Edit
import { useSession } from "next-auth/react";
import LandingPageEditor from "../features/landing-page/LandingPageEditor";
import AnalyticsDashboard from "../features/analytics/AnalyticsDashboard";
import CommunityForum from "../features/community/CommunityForum";
import CertificateGenerator from "../features/certificate/CertificateGenerator";

import { useState } from "react";

export default function Dashboard() {
  const { data: session, status } = useSession();
  const [tab, setTab] = useState('landing');

  if (status === "loading") return <p>Loading...</p>;
  if (!session) return <p>Please sign in to access your dashboard.</p>;

  return (
    <div>
      <h1 className="text-3xl font-bold mb-6">Dashboard</h1>
      <nav className="mb-6 flex space-x-4">
        <button onClick={() => setTab('landing')} className={`px-4 py-2 rounded ${tab === 'landing' ? 'bg-blue-600 text-white' : 'bg-gray-200'}`}>
          Landing Page Builder
        </button>
        <button onClick={() => setTab('analytics')} className={`px-4 py-2 rounded ${tab === 'analytics' ? 'bg-blue-600 text-white' : 'bg-gray-200'}`}>
          Analytics
        </button>
        <button onClick={() => setTab('community')} className={`px-4 py-2 rounded ${tab === 'community' ? 'bg-blue-600 text-white' : 'bg-gray-200'}`}>
          Community
        </button>
        <button onClick={() => setTab('certificate')} className={`px-4 py-2 rounded ${tab === 'certificate' ? 'bg-blue-600 text-white' : 'bg-gray-200'}`}>
          Certificates
        </button>
      </nav>

      <div>
        {tab === 'landing' && <LandingPageEditor />}
        {tab === 'analytics' && <AnalyticsDashboard />}
        {tab === 'community' && <CommunityForum />}
        {tab === 'certificate' && <CertificateGenerator />}
      </div>
    </div>
  );
}

tsx
Copy
Edit
import { useState } from "react";

export default function LandingPageEditor() {
  const [prompt, setPrompt] = useState("");
  const [result, setResult] = useState("");
  const [loading, setLoading] = useState(false);

  async function generateLandingPage() {
    setLoading(true);
    const res = await fetch("/api/ai/generate", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ prompt }),
    });
    const data = await res.json();
    setResult(data.content);
    setLoading(false);
  }

  return (
    <div className="max-w-3xl mx-auto">
      <textarea
        rows={5}
        placeholder="Describe your business, target audience, and goals..."
        className="w-full p-3 border border-gray-300 rounded"
        value={prompt}
        onChange={(e) => setPrompt(e.target.value)}
      />
      <button
        onClick={generateLandingPage}
        disabled={loading || !prompt.trim()}
        className="mt-4 bg-blue-600 text-white px-5 py-3 rounded disabled:opacity-50"
      >
        {loading ? "Generating..." : "Generate Landing Page"}
      </button>
      {result && (
        <pre className="mt-6 bg-gray-100 p-4 rounded whitespace-pre-wrap">{result}</pre>
      )}
    </div>
  );
}

ts
Copy
Edit
import type { NextApiRequest, NextApiResponse } from "next";

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  if (req.method !== "POST") {
    res.setHeader("Allow", "POST");
    return res.status(405).end("Method Not Allowed");
  }

  const { prompt } = req.body;
  if (!prompt) return res.status(400).json({ error: "Prompt is required" });

  // TODO: Integrate with OpenAI or your AI backend here.
  const fakeResponse = `ðŸ§  AI generated landing page content for:\n${prompt}\n\n[This is a demo response.]`;

  res.status(200).json({ content: fakeResponse });
}

tsx
Copy
Edit
export default function AnalyticsDashboard() {
  // Dummy data example
  const data = {
    visitors: 1234,
    conversions: 56,
    revenue: 7890,
  };

  return (
    <div className="max-w-3xl mx-auto bg-white p-6 rounded shadow">
      <h2 className="text-xl font-bold mb-4">Analytics Dashboard</h2>
      <ul className="space-y-3">
        <li>
          <strong>Visitors:</strong> {data.visitors}
        </li>
        <li>
          <strong>Conversions:</strong> {data.conversions}
        </li>
        <li>
          <strong>Revenue:</strong> ${data.revenue}
        </li>
      </ul>
    </div>
  );
}

tsx
Copy
Edit
import { useState, useEffect } from "react";

export default function CommunityForum() {
  const [posts, setPosts] = useState([]);
  const [newPost, setNewPost] = useState("");
  const [loading, setLoading] = useState(false);

  async function fetchPosts() {
    const res = await fetch("/api/community/posts");
    const data = await res.json();
    setPosts(data.posts);
  }

  async function submitPost() {
    if (!newPost.trim()) return;
    setLoading(true);
    await fetch("/api/community/posts", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ content: newPost }),
    });
    setNewPost("");
    await fetchPosts();
    setLoading(false);
  }

  useEffect(() => {
    fetchPosts();
  }, []);

  return (
    <div className="max-w-3xl mx-auto">
      <h2 className="text-xl font-bold mb-4">Community Forum</h2>
      <textarea
        rows={3}
        placeholder="Write your post..."
        className="w-full p-3 border border-gray-300 rounded"
        value={newPost}
        onChange={(e) => setNewPost(e.target.value)}
      />
      <button
        onClick={submitPost}
        disabled={loading || !newPost.trim()}
        className="mt-2 bg-blue-600 text-white px-4 py-2 rounded disabled:opacity-50"
      >
        {loading ? "Posting..." : "Post"}
      </button>

      <div className="mt-6 space-y-4">
        {posts.length === 0 && <p>No posts yet.</p>}
        {posts.map((post) => (
          <div key={post.id} className="p-4 bg-gray-100 rounded shadow">
            <p>{post.content}</p>
            <small className="text-gray-500">{new Date(post.createdAt).toLocaleString()}</small>
          </div>
        ))}
      </div>
    </div>
  );
}

ts
Copy
Edit
import type { NextApiRequest, NextApiResponse } from "next";

type Post = {
  id: string;
  content: string;
  createdAt: string;
};

let posts: Post[] = [];

export default function handler(req: NextApiRequest, res: NextApiResponse) {
  if (req.method === "GET") {
    return res.status(200).json({ posts });
  } else if (req.method === "POST") {
    const { content } = req.body;
    if (!content) return res.status(400).json({ error: "Content required" });
    const newPost = {
      id: (posts.length + 1).toString(),
      content,
      createdAt: new Date().toISOString(),
    };
    posts = [newPost, ...posts];
    return res.status(201).json(newPost);
  } else {
    res.setHeader("Allow", ["GET", "POST"]);
    return res.status(405).end("Method Not Allowed");
  }
}

tsx
Copy
Edit
import { useState } from "react";

export default function CertificateGenerator() {
  const [name, setName] = useState("");
  const [generating, setGenerating] = useState(false);
  const [pdfUrl, setPdfUrl] = useState<string | null>(null);

  async function generateCertificate() {
    if (!name.trim()) return;
    setGenerating(true);
    const res = await fetch("/api/certificate/generate", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ name }),
    });
    const blob = await res.blob();
    const url = URL.createObjectURL(blob);
    setPdfUrl(url);
    setGenerating(false);
  }

  return (
    <div className="max-w-md mx-auto text-center">
      <h2 className="text-xl font-bold mb-4">Generate Certificate</h2>
      <input
        type="text"
        placeholder="Enter recipient's name"
        className="w-full p-3 border border-gray-300 rounded mb-4"
        value={name}
        onChange={(e) => setName(e.target.value)}
      />
      <button
        onClick={generateCertificate}
        disabled={generating || !name.trim()}
        className="bg-blue-600 text-white px-5 py-3 rounded disabled:opacity-50"
      >
        {generating ? "Generating..." : "Generate PDF"}
      </button>
      {pdfUrl && (
        <div className="mt-6">
          <a href={pdfUrl} target="_blank" rel="noopener noreferrer" className="text-blue-600 underline">
            Download Certificate
          </a>
        </div>
      )}
    </div>
  );
}

import { useEffect, useRef } from 'react';

export default function PricingPage() {
  const paypalRef = useRef();

  useEffect(() => {
    const script = document.createElement('script');
    script.src = `https://www.paypal.com/sdk/js?client-id=${process.env.NEXT_PUBLIC_PAYPAL_CLIENT_ID}&currency=USD`;
    script.addEventListener('load', () => {
      window.paypal.Buttons({
        createOrder: (data, actions) => {
          return actions.order.create({
            purchase_units: [{
              amount: {
                value: '9.99', // Change dynamically for your pricing plans
              },
            }],
          });
        },
        onApprove: async (data, actions) => {
          const order = await actions.order.capture();
          console.log('Payment success:', order);

          // Call backend API to verify and activate plan
          const response = await fetch('/api/paypal-verify', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ orderID: data.orderID }),
          });

          const result = await response.json();

          if (result.success) {
            alert('Payment completed successfully! Your plan is now active.');
          } else {
            alert('Payment verification failed.');
          }
        },
        onError: err => {
          console.error('PayPal Checkout onError:', err);
          alert('Payment failed or cancelled.');
        },
      }).render(paypalRef.current);
    });
    document.body.appendChild(script);
  }, []);

  return (
    <div style={{ maxWidth: 500, margin: 'auto', padding: 20 }}>
      <h1>Choose Your Pricing Plan</h1>
      <p>Standard Plan: $50/month</p>
      <div ref={paypalRef} />
    </div>
  );
}

import { useEffect, useRef, useState } from 'react';

const PRICING_PLANS = [
  { id: 'basic', label: 'Basic Plan', price: '5.99' },
  { id: 'standard', label: 'Standard Plan', price: '9.99' },
  { id: 'pro', label: 'Pro Plan', price: '19.99' },
];

export default function PricingPage() {
  const [selectedPlan, setSelectedPlan] = useState(PRICING_PLANS[0]);
  const paypalRef = useRef();

  useEffect(() => {
    if (!selectedPlan) return;

    // Clear previous buttons if any
    paypalRef.current.innerHTML = '';

    const script = document.createElement('script');
    script.src = `https://www.paypal.com/sdk/js?client-id=${process.env.NEXT_PUBLIC_PAYPAL_CLIENT_ID}&currency=USD`;
    script.addEventListener('load', () => {
      window.paypal.Buttons({
        createOrder: (data, actions) => {
          return actions.order.create({
            purchase_units: [{
              amount: {
                value: selectedPlan.price,
              },
            }],
          });
        },
        onApprove: async (data, actions) => {
          const order = await actions.order.capture();
          console.log('Payment success:', order);

          // Send order ID and selected plan to backend for verification & activation
          const response = await fetch('/api/paypal-verify', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ orderID: data.orderID, planId: selectedPlan.id }),
          });

          const result = await response.json();

          if (result.success) {
            alert(`Payment completed! Your ${selectedPlan.label} is now active.`);
          } else {
            alert('Payment verification failed.');
          }
        },
        onError: err => {
          console.error('PayPal Checkout onError:', err);
          alert('Payment failed or cancelled.');
        },
      }).render(paypalRef.current);
    });
    document.body.appendChild(script);

    return () => {
      // Clean up script to prevent duplicates if plan changes
      document.body.removeChild(script);
    };
  }, [selectedPlan]);

  return (
    <div style={{ maxWidth: 500, margin: 'auto', padding: 20 }}>
      <h1>Choose Your Pricing Plan</h1>
      <ul style={{ listStyle: 'none', padding: 0 }}>
        {PRICING_PLANS.map(plan => (
          <li key={plan.id} style={{ marginBottom: 10 }}>
            <label>
              <input
                type="radio"
                name="plan"
                value={plan.id}
                checked={selectedPlan.id === plan.id}
                onChange={() => setSelectedPlan(plan)}
              />
              {` ${plan.label} - $${plan.price}`}
            </label>
          </li>
        ))}
      </ul>
      <div ref={paypalRef} />
      <hr />
      <h2>Stripe Payment (Not Available Now)</h2>
      <p>Stripe integration is currently disabled for your region.</p>
    </div>
  );
}

import fetch from 'node-fetch';
import { activateUserPlan } from '../../utils/subscription';
import { sendPaymentEmail } from '../../utils/email';

const PAYPAL_CLIENT_ID = process.env.PAYPAL_CLIENT_ID;
const PAYPAL_SECRET = process.env.PAYPAL_SECRET;

async function getAccessToken() {
  const response = await fetch('https://api-m.paypal.com/v1/oauth2/token', {
    method: 'POST',
    headers: {
      'Authorization': 'Basic ' + Buffer.from(PAYPAL_CLIENT_ID + ':' + PAYPAL_SECRET).toString('base64'),
      'Content-Type': 'application/x-www-form-urlencoded',
    },
    body: 'grant_type=client_credentials',
  });
  const data = await response.json();
  return data.access_token;
}

export default async function handler(req, res) {
  if (req.method !== 'POST') return res.status(405).send('Method Not Allowed');

  const { orderID, planId } = req.body;

  try {
    const accessToken = await getAccessToken();

    const verifyResponse = await fetch(`https://api-m.paypal.com/v2/checkout/orders/${orderID}`, {
      method: 'GET',
      headers: {
        'Authorization': `Bearer ${accessToken}`,
        'Content-Type': 'application/json',
      },
    });

    const orderData = await verifyResponse.json();

    if (orderData.status === 'COMPLETED') {
      // Activate the user's subscription plan (mock example)
      await activateUserPlan(orderData.payer.email_address, planId);

      // Send payment confirmation email
      await sendPaymentEmail(orderData.payer.email_address, planId);

      return res.status(200).json({ success: true });
    } else {
      return res.status(400).json({ success: false, message: 'Payment not completed' });
    }
  } catch (error) {
    console.error('PayPal verification error:', error);
    return res.status(500).json({ success: false, message: 'Internal Server Error' });
  }
}

const userSubscriptions = {};

export async function activateUserPlan(email, planId) {
  // Mock: Save subscription to memory (replace with real DB in prod)
  userSubscriptions[email] = { planId, activatedAt: new Date().toISOString() };
  console.log(`Activated plan ${planId} for user ${email}`);
}

import nodemailer from 'nodemailer';

const transporter = nodemailer.createTransport({
  host: process.env.SMTP_HOST,
  port: Number(process.env.SMTP_PORT),
  secure: false,
  auth: {
    user: process.env.SMTP_USER,
    pass: process.env.SMTP_PASS,
  },
});

const PLAN_LABELS = {
  basic: 'Basic Plan',
  standard: 'Standard Plan',
  pro: 'Pro Plan',
};

export async function sendPaymentEmail(toEmail, planId) {
  const mailOptions = {
    from: process.env.SMTP_FROM_EMAIL,
    to: toEmail,
    subject: `Your InstaLanding AI ${PLAN_LABELS[planId]} Subscription`,
    text: `Thank you for your payment! Your ${PLAN_LABELS[planId]} subscription is now active.`,
  };

  await transporter.sendMail(mailOptions);
  console.log(`Sent payment confirmation email to ${toEmail}`);
}

// Stripe integration disabled, enable only if available

export async function createStripeSession(priceId) {
  if (process.env.ENABLE_STRIPE !== 'false') return null;

  // Add Stripe logic here when enabled
  return null;
}



ts
Copy
Edit
// Sample API endpoint for testing
import type { NextApiRequest, NextApiResponse } from "next";

export default function handler(req: NextApiRequest, res: NextApiResponse) {
  res.status(200).json({ message: "Hello from InstaLanding AI!" });
}

